/Bit De-Stuffing/

#include <stdio.h>
#include <string.h>

void main() {
    char data[100], destuffed_data[150];
    int count = 0, i, j = 0;

    printf("Enter data for destuffing: ");
    scanf("%s", data);

    for (i = 0; i < strlen(data); i++) {
        if (data[i] == '1') {
            count++;
            destuffed_data[j++] = data[i];
        } else {
            if (count == 5) {
                count = 0;
                continue;
            } else {
                count = 0;
                destuffed_data[j++] = data[i];
            }
        }
    }
    destuffed_data[j] = '\0';
    printf("Data after bit destuffing: %s\n", destuffed_data);
}


/*
Enter data for destuffing: 1111100110
Data after bit destuffing: 111110110


=== Code Exited With Errors ===
*/
/* Bit Stuffing*/


#include <stdio.h>
#include <string.h>

void main() {
    char data[100], stuffed_data[150];
    int count = 0, i, j = 0;

    printf("Enter data for stuffing: ");
    scanf("%s", data);

    for (i = 0; i < strlen(data); i++) {
        if (data[i] == '1') {
            count++;
            stuffed_data[j++] = data[i];
        } else {
            count = 0;
            stuffed_data[j++] = data[i];
        }

        if (count == 5) {
            stuffed_data[j++] = '0';
            count = 0;
        }
    }
    stuffed_data[j] = '\0';
    printf("Data after bit stuffing: %s\n", stuffed_data);
}

/*
Enter data for stuffing: 1011111101010
Data after bit stuffing: 10111110101010


=== Code Exited With Errors ===
*/
/* Character De-Stuffing */

#include <stdio.h>
#include <string.h>
#define MAX_SIZE 200
#define ESC "ESC"

void charDestuffing(const char input[], char output[]) {
    int i = 0, j = 0;

    while (i < strlen(input)) {
        if (strncmp(&input[i], ESC, strlen(ESC)) == 0) {
            i += strlen(ESC);
        }
        output[j++] = input[i++];
    }
    output[j] = '\0';
}

int main() {
    char stuffed[MAX_SIZE], destuffed[MAX_SIZE];

    printf("Enter the stuffed data for character destuffing: ");
    fgets(stuffed, sizeof(stuffed), stdin);
    stuffed[strcspn(stuffed, "\n")] = '\0';

    charDestuffing(stuffed, destuffed);

    printf("Stuffed Data: %s\n", stuffed);
    printf("Destuffed Data: %s\n", destuffed);
    return 0;
}

/*
Enter the stuffed data for character destuffing: Hello ESCESC World ESCFLAG!
Stuffed Data: Hello ESCESC World ESCFLAG!
Destuffed Data: Hello ESC World FLAG!


=== Code Execution Successful ===
*/
/Character Stuffing/
#include <stdio.h>
#include <string.h>
#define MAX_SIZE 200
#define FLAG "FLAG"
#define ESC "ESC"

void charStuffing(const char input[], char output[]) {
    int i = 0, j = 0;
    while (i < strlen(input)) {
        if (strncmp(&input[i], FLAG, strlen(FLAG)) == 0 || strncmp(&input[i], ESC, strlen(ESC)) == 0) {
            strcpy(&output[j], ESC);
            j += strlen(ESC);
        }
        output[j++] = input[i++];
    }
    output[j] = '\0';
}

int main() {
    char data[MAX_SIZE], stuffed[MAX_SIZE];

    printf("Enter the data for character stuffing: ");
    fgets(data, sizeof(data), stdin);
    data[strcspn(data, "\n")] = '\0';

    charStuffing(data, stuffed);

    printf("Original Data: %s\n", data);
    printf("Stuffed Data: %s\n", stuffed);
    return 0;
}


/*
Enter the data for character stuffing: HelloESCWorldFLAG!
Original Data: HelloESCWorldFLAG!
Stuffed Data: HelloESCESCWorldESCFLAG!


=== Code Execution Successful ===
*/
/CRC Polynomials (CRC-12, CRC-16, CRC-CCIP)/

#include <stdio.h>
#include <string.h>

#define N strlen(gen_poly)

char data[28];
char check_value[28];
char gen_poly[10];
int data_length;

void XOR() {
    for (int j = 1; j < N; j++)
        check_value[j] = ((check_value[j] == gen_poly[j]) ? '0' : '1');
}

void crc() {
    for (int i = 0; i < N; i++)
        check_value[i] = data[i];

    do {
        if (check_value[0] == '1')
            XOR();

        for (int j = 0; j < N - 1; j++)
            check_value[j] = check_value[j + 1];

        check_value[N - 1] = data[data_length++];
    } while (data_length <= strlen(data));
}

void receiver() {
    printf("Enter the received data: ");
    scanf("%s", data);

    printf("\n-----------------------------\n");
    printf("Data received: %s\n", data);

    crc();

    for (int i = 0; i < N - 1 && check_value[i] != '1'; i++);

    if (strchr(check_value, '1'))
        printf("Error detected\n\n");
    else
        printf("No error detected\n\n");
}

int main() {
    printf("Enter data to be transmitted: ");
    scanf("%s", data);

    printf("Enter the Generating Polynomial: ");
    scanf("%s", gen_poly);

    data_length = strlen(data);
    for (int i = data_length; i < data_length + N - 1; i++)
        data[i] = '0';

    data[data_length + N - 1] = '\0';

    printf("\n----------------------------------------\n");
    printf("Data padded with n-1 zeros: %s\n", data);
    printf("----------------------------------------\n");

    crc();

    printf("CRC or Check Value: %s\n", check_value);

    for (int i = data_length; i < data_length + N - 1; i++)
        data[i] = check_value[i - data_length];

    printf("Final data to be sent: %s\n", data);
    printf("----------------------------------------\n");

    receiver();
    return 0;
}


/*
Enter data to be transmitted: 10011110101
Enter the Generating Polynomial: 10110

----------------------------------------
Data padded with n-1 zeros: 100111101010000
----------------------------------------
CRC or Check Value: 1000
Final data to be sent: 100111101010000
----------------------------------------
Enter the received data: 100111101011010

-----------------------------
Data received: 100111101011010
Error detected



=== Code Execution Successful ===
*/
/Dijkstraâ€™s Algorithm for Shortest Path/

#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 100

int minDistance(int dist[], int sptSet[], int vertices) {
    int min = INT_MAX, minIndex;

    for (int v = 0; v < vertices; v++) {
        if (!sptSet[v] && dist[v] < min) {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}

void printSolution(int dist[], int vertices) {
    printf("Vertex \tDistance from Source\n");
    for (int i = 0; i < vertices; i++) {
        printf("%d \t%d\n", i, dist[i]);
    }
}

void dijkstra(int graph[MAX_VERTICES][MAX_VERTICES], int src, int vertices) {
    int dist[MAX_VERTICES];
    int sptSet[MAX_VERTICES];

    for (int i = 0; i < vertices; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }

    dist[src] = 0;

    for (int count = 0; count < vertices - 1; count++) {
        int u = minDistance(dist, sptSet, vertices);
        sptSet[u] = 1;

        for (int v = 0; v < vertices; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
    printSolution(dist, vertices);
}

int main() {
    int vertices;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    int graph[MAX_VERTICES][MAX_VERTICES];
    printf("Enter the adjacency matrix for the graph:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int source;
    printf("Enter the source vertex: ");
    scanf("%d", &source);

    dijkstra(graph, source, vertices);
    return 0;
}

/*
Enter the number of vertices: 3
Enter the adjacency matrix for the graph:
1 2 3
2 3 4
4 5 6
Enter the source vertex: 1
Vertex 	Distance from Source
0 	2
1 	0
2 	4


=== Code Execution Successful ===
*/
/* compute First function */

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100
#define MAX_RULES 10

char grammar[MAX_RULES][MAX];
int numRules;
char first[MAX_RULES][MAX];
int firstCount[MAX_RULES];

void findFirst(char symbol, int index) {
    for (int i = 0; i < numRules; i++) {
        if (grammar[i][0] == symbol) {
            for (int j = 3; grammar[i][j] != '\0'; j++) {
                if (islower(grammar[i][j])) {
                    if (!strchr(first[index], grammar[i][j])) {
                        first[index][firstCount[index]++] = grammar[i][j];
                    }
                    break;
                } else {
                    findFirst(grammar[i][j], grammar[i][j] - 'A');
                    for (int k = 0; k < firstCount[grammar[i][j] - 'A']; k++) {
                        if (!strchr(first[index], first[grammar[i][j] - 'A'][k])) {
                            first[index][firstCount[index]++] = first[grammar[i][j] - 'A'][k];
                        }
                    }
                    break;
                }
            }
        }
    }
}

int main() {
    printf("Enter the number of grammar rules: ");
    scanf("%d", &numRules);

    printf("Enter the grammar rules (e.g., A->aB|c):\n");
    for (int i = 0; i < numRules; i++) {
        scanf("%s", grammar[i]);
    }

    for (int i = 0; i < numRules; i++) {
        findFirst(grammar[i][0], grammar[i][0] - 'A');
    }

    printf("\nFirst Sets:\n");
    for (int i = 0; i < numRules; i++) {
        printf("First(%c) = { ", grammar[i][0]);
        for (int j = 0; j < firstCount[grammar[i][0] - 'A']; j++) {
            printf("%c ", first[grammar[i][0] - 'A'][j]);
        }
        printf("}\n");
    }

    return 0;
}


/*
Enter the number of grammar rules: 3
Enter the grammar rules (e.g., A->aB|c):
A->aB|c
B->b
C->cD

First Sets:
First(A) = { a c }
First(B) = { b }
First(C) = { c }

*/
/* Follow Function */

#include<stdio.h>
#include<string.h>
#include<ctype.h>

int n, m = 0, i = 0, j = 0;
char a[10][10], followResult[10];

// Function to calculate FOLLOW
void follow(char c);

// Function to calculate FIRST
void first(char c);

// Function to add a character to the result
void addToResult(char c);

int main() {
    int i;
    int choice;
    char c, ch;

    printf("Enter the number of productions: ");
    scanf("%d", &n);
    printf("Enter %d productions\nProductions with multiple terms should be given as separate productions:\n", n);

    // Read the grammar productions
    for(i = 0; i < n; i++) {
        scanf("%s%c", a[i], &ch);
    }

    // Loop to calculate the FOLLOW sets for different non-terminals
    do {
        m = 0;
        printf("Find FOLLOW of -->");
        scanf(" %c", &c);

        follow(c); // Calculate the FOLLOW set for the given non-terminal

        // Print the FOLLOW set
        printf("FOLLOW(%c) = { ", c);
        for(i = 0; i < m; i++) {
            printf("%c ", followResult[i]);
        }
        printf(" }\n");

        // Ask if the user wants to continue
        printf("Do you want to continue (Press 1 to continue....)? ");
        scanf("%d%c", &choice, &ch);

    } while(choice == 1);

    return 0;
}

// Function to calculate the FOLLOW of a given non-terminal 'c'
void follow(char c) {
    // If the non-terminal is the start symbol, add '$' to its FOLLOW set
    if(a[0][0] == c) {
        addToResult('$');
    }

    // Check the productions for occurrences of 'c'
    for(i = 0; i < n; i++) {
        for(j = 2; j < strlen(a[i]); j++) {
            // If the non-terminal 'c' appears in the right-hand side of a production
            if(a[i][j] == c) {
                // If it's not the last symbol, add the FIRST of the next symbol
                if(a[i][j+1] != '\0') {
                    first(a[i][j+1]);
                }
                // If it's the last symbol and not the left-hand side, add the FOLLOW of the left-hand side
                if(a[i][j+1] == '\0' && c != a[i][0]) {
                    follow(a[i][0]);
                }
            }
        }
    }
}

// Function to calculate the FIRST of a given symbol 'c'
void first(char c) {
    int k;

    // If the symbol is a terminal, add it to the FIRST set
    if(!(isupper(c))) {
        addToResult(c);
    }

    // Otherwise, it's a non-terminal, so check its productions
    for(k = 0; k < n; k++) {
        if(a[k][0] == c) {
            // If the production starts with epsilon ('$'), add the FOLLOW of the left-hand side
            if(a[k][2] == '$') {
                follow(a[k][0]);
            }
            // If the production starts with a terminal, add it to the FIRST set
            else if(islower(a[k][2])) {
                addToResult(a[k][2]);
            }
            // If the production starts with a non-terminal, recurse on its FIRST set
            else {
                first(a[k][2]);
            }
        }
    }
}

// Function to add a symbol to the FOLLOW set, if it's not already present
void addToResult(char c) {
    int i;
    // Check if the character is already in the FOLLOW set
    for(i = 0; i < m; i++) {
        if(followResult[i] == c) {
            return;
        }
    }
    // If not present, add it to the FOLLOW set
    followResult[m++] = c;
}


/*
Enter the number of productions: 4
Enter 4 productions
Productions with multiple terms should be given as separate productions:
S->AB
A->a
B->b
B->$
Find FOLLOW of -->A
FOLLOW(A) = { >  }
Do you want to continue (Press 1 to continue....)? 1
Find FOLLOW of -->B
FOLLOW(B) = { $  }
Do you want to continue (Press 1 to continue....)? 0


=== Code Execution Successful ===
*/
/Left Factoring/

#include <stdio.h>
#include <string.h>

int main() {
    char grammar[20], part1[20], part2[20], commonPrefix[20], newProduction[20];
    printf("Enter Production (e.g., A->aB|aC): ");
    scanf("%s", grammar);

    int i = 3, j = 0;
    while (grammar[i] != '|') {
        part1[j++] = grammar[i++];
    }
    part1[j] = '\0';
    i++;
    j = 0;
    while (grammar[i] != '\0') {
        part2[j++] = grammar[i++];
    }
    part2[j] = '\0';

    j = 0;
    while (part1[j] == part2[j] && part1[j] != '\0' && part2[j] != '\0') {
        commonPrefix[j] = part1[j];
        j++;
    }
    commonPrefix[j] = '\0';

    printf("Left Factored Grammar:\n");
    printf("A -> %sX\n", commonPrefix);
    printf("X -> %s|%s\n", part1 + j, part2 + j);
    return 0;
}


/*
Enter Production (e.g., A->aB|aC): A->CB|CD
Left Factored Grammar:
A -> CX
X -> B|D


=== Code Execution Successful ===
*/
/left recursion for a given context-free grammar./

#include <stdio.h>
#include <string.h>
#define SIZE 20

int main() {
    char non_terminal;
    char beta[SIZE], alpha[SIZE];
    int num;
    char production[10][SIZE];

    printf("Enter Number of Productions: ");
    scanf("%d", &num);

    printf("Enter the grammar (e.g., E->E+T | E->a):\n");
    for (int i = 0; i < num; i++) {
        scanf("%s", production[i]);
    }

    for (int i = 0; i < num; i++) {
        printf("\nGRAMMAR: %s", production[i]);
        non_terminal = production[i][0];
        int has_left_recursion = 0;

        for (int j = 3; production[i][j] != '\0'; j++) {
            if (production[i][j] == non_terminal) {
                has_left_recursion = 1;
                break;
            }
        }

        if (has_left_recursion) {
            printf(" is left recursive.\n");
            int beta_index = 0, alpha_index = 0;
            int k = 3;

            while (production[i][k] != '\0') {
                if (production[i][k] == non_terminal) {
                    if (production[i][k + 1] != '\0') {
                        alpha[alpha_index++] = production[i][k + 1];
                    }
                    k += 2;
                } else {
                    beta[beta_index++] = production[i][k];
                    k++;
                }
            }

            beta[beta_index] = '\0';
            alpha[alpha_index] = '\0';

            printf("Grammar without left recursion:\n");
            printf("%c -> %c%c' \n", non_terminal, beta[0], non_terminal);
            printf("%c' -> %s%c' | Îµ\n", non_terminal, alpha, non_terminal);
        } else {
            printf(" is not left recursive.\n");
        }
    }

    return 0;
}


/*
Enter Number of Productions: 2
Enter the grammar (e.g., E->E+T | E->a):
A->AE|A
T->aT|a

GRAMMAR: A->AE|A is left recursive.
Grammar without left recursion:
A -> |A'
A' -> EA' | Îµ

GRAMMAR: T->aT|a is left recursive.
Grammar without left recursion:
T -> aT'
T' -> |T' | Îµ


=== Code Execution Successful ===
*/
/lexical analyser/
#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LENGTH 100

// List of keywords
const char *keywords[] = {
    "auto", "break", "case", "char", "const", "continue", "default", "do", "double",
    "else", "enum", "extern", "float", "for", "goto", "if", "int", "long",
    "register", "return", "short", "signed", "sizeof", "static", "struct", "switch",
    "typedef", "union", "unsigned", "void", "volatile", "while"
};

// Check if a character is a delimiter
bool isDelimiter(char chr) {
    return (chr == ' ' || chr == '+' || chr == '-' || chr == '*' || chr == '/' ||
            chr == ',' || chr == ';' || chr == '%' || chr == '>' || chr == '<' ||
            chr == '=' || chr == '(' || chr == ')' || chr == '[' || chr == ']' ||
            chr == '{' || chr == '}' || !isprint(chr));
}

// Check if a character is an operator
bool isOperator(char chr) {
    return (chr == '+' || chr == '-' || chr == '*' || chr == '/' || chr == '>' || chr == '<' || chr == '=');
}

// Check if a string is a keyword
bool isKeyword(const char *str) {
    for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
        if (strcmp(str, keywords[i]) == 0) {
            return true;
        }
    }
    return false;
}

// Check if a string is a valid identifier
bool isValidIdentifier(const char *str) {
    if (isdigit(str[0]) || str[0] == '\0') {
        return false;
    }
    for (int i = 0; str[i]; i++) {
        if (!isalnum(str[i]) && str[i] != '_') {
            return false;
        }
    }
    return true;
}

// Check if a string is an integer
bool isInteger(const char *str) {
    int i = 0;
    if (str[i] == '-' || str[i] == '+') {
        i++;
    }
    while (isdigit(str[i])) {
        i++;
    }
    return str[i] == '\0';
}

// Lexical analyzer function
void lexicalAnalyzer(const char *input) {
    int left = 0, right = 0;
    int len = strlen(input);

    while (right <= len) {
        if (!isDelimiter(input[right]) && input[right] != '\0') {
            right++;
        } else {
            if (left != right) {
                char *subStr = strndup(&input[left], right - left);
                if (isKeyword(subStr)) {
                    printf("Token: Keyword, Value: %s\n", subStr);
                } else if (isInteger(subStr)) {
                    printf("Token: Integer, Value: %s\n", subStr);
                } else if (isValidIdentifier(subStr)) {
                    printf("Token: Identifier, Value: %s\n", subStr);
                } else {
                    printf("Token: Unidentified, Value: %s\n", subStr);
                }
                free(subStr);
            }
            if (isOperator(input[right])) {
                printf("Token: Operator, Value: %c\n", input[right]);
            } else if (ispunct(input[right])) {
                printf("Token: Punctuation, Value: %c\n", input[right]);
            }
            right++;
            left = right;
        }
    }
}

// Main function
int main() {
    char input[MAX_LENGTH];
    printf("Enter code for lexical analysis: ");
    fgets(input, MAX_LENGTH, stdin);
    input[strcspn(input, "\n")] = '\0'; // Remove trailing newline character
    lexicalAnalyzer(input);
    return 0;
}

/*Pattern Matching (a, abb, a*b+) string */

#include <stdio.h>
#include <stdbool.h>
#include <string.h>

bool matches_a(const char *str) {
    return (strcmp(str, "a") == 0);
}

bool matches_abb(const char *str) {
    return (strcmp(str, "abb") == 0);
}

bool matches_a_star_b_plus(const char *str) {
    int len = strlen(str);
    int i = 0;
    while (i < len && str[i] == 'a') i++;
    bool found_b = false;
    while (i < len) {
        if (str[i] == 'b') {
            found_b = true;
        } else {
            return false;
        }
        i++;
    }
    return found_b;
}

int main() {
    char input[100];
    printf("Enter a string: ");
    scanf("%s", input);

    if (matches_a(input)) {
        printf("The string matches the pattern 'a'\n");
    }
    if (matches_abb(input)) {
        printf("The string matches the pattern 'abb'\n");
    }
    if (matches_a_star_b_plus(input)) {
        printf("The string matches the pattern 'a*b+'\n");
    }
    if (!matches_a(input) && !matches_abb(input) && !matches_a_star_b_plus(input)) {
        printf("The string does not match any of the patterns\n");
    }
    return 0;
}


/*
Enter a string: aabb
The string matches the pattern 'a*b+'


=== Code Execution Successful ===
*/
/Shift-Reduce Parser/
#include <stdio.h>
#include <string.h>

struct ProductionRule {
    char left[10];
    char right[10];
};

int main() {
    char input[50], stack[50], temp[50];
    char *token1, *token2, *substring;
    int i, j, stackLength, substringLength, stackTop, ruleCount;
    struct ProductionRule rules[10];

    stack[0] = '\0'; // Initialize the stack as an empty string

    // Input number of production rules
    printf("Enter the number of production rules: ");
    scanf("%d", &ruleCount);

    // Input production rules
    printf("Enter the production rules (e.g., S->aA):\n");
    for (i = 0; i < ruleCount; i++) {
        scanf("%s", temp);
        token1 = strtok(temp, "->");
        token2 = strtok(NULL, "->");
        strcpy(rules[i].left, token1);
        strcpy(rules[i].right, token2);
    }

    // Input string for parsing
    printf("Enter the input string: ");
    scanf("%s", input);
    strcat(input, "$"); // Append end-of-input symbol

    i = 0;
    while (1) {
        // Perform shift operation if input exists
        if (i < strlen(input)) {
            char ch[2] = {input[i], '\0'}; // Get the next character
            i++;
            strcat(stack, ch);
            printf("Stack: %-10s Input: %-10s Action: Shift %s\n", stack, &input[i], ch);
        }

        // Perform reduce operation based on rules
        for (j = 0; j < ruleCount; j++) {
            substring = strstr(stack, rules[j].right); // Find match in the stack
            if (substring != NULL) {
                stackLength = strlen(stack);
                substringLength = strlen(substring);
                stackTop = stackLength - substringLength;
                stack[stackTop] = '\0'; // Remove the matched part
                strcat(stack, rules[j].left); // Replace with the left-hand side
                printf("Stack: %-10s Input: %-10s Action: Reduce %s->%s\n",
                       stack, &input[i], rules[j].left, rules[j].right);
                j = -1; // Restart rule checking after reduction
            }
        }

        // Check for acceptance
        if (strcmp(stack, rules[0].left) == 0 && input[i] == '$') {
            printf("\nAccepted\n");
            break;
        }

        // Check for rejection
        if (i == strlen(input) && strcmp(stack, rules[0].left) != 0) {
            printf("\nNot Accepted\n");
            break;
        }
    }

    return 0;
}


/*
Enter the number of production rules: 3
Enter the production rules (e.g., S->aA):
S->AB
A->a
B->b
Enter the input string: ab
Stack: a          Input: b$         Action: Shift a
Stack: A          Input: b$         Action: Reduce A->a
Stack: Ab         Input: $          Action: Shift b
Stack: AB         Input: $          Action: Reduce B->b
Stack: S          Input: $          Action: Reduce S->AB

Accepted


=== Code Execution Successful ===
*/

/FOLLOW/
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void FIRST(char);
void FOLLOW(char);
int addToSet(char[], char);
int count, n = 0, m = 0;
char prodn[10][10], first[10], follow[10];
int main() {
    int i, j;
    char ch;
    printf("Enter the number of productions: ");
    scanf("%d", &count);
    printf("Enter %d productions (use $ for epsilon):\n", count);
    for (i = 0; i < count; i++) {
        scanf("%s", prodn[i]);
    }
    for (i = 0; i < count; i++) {
        char nonTerminal = prodn[i][0];
        n = 0;
        memset(first, 0, sizeof(first));
        FIRST(nonTerminal);

        m = 0;
        memset(follow, 0, sizeof(follow));
        FOLLOW(nonTerminal);
        printf("FOLLOW(%c) = { ", nonTerminal);
        for (j = 0; j < m; j++) {
            printf("%c ", follow[j]);
        }
        printf("}\n");
    }
    return 0;
}
int addToSet(char set[], char c) {
    if (c == '\0') return 0;
    int i;
    for (i = 0; set[i] != '\0'; i++) {
        if (set[i] == c)
            return 0;
    }
    set[i] = c;
    set[i + 1] = '\0';
    return 1;
}
void FIRST(char c) {
    int j;
    if (!isupper(c)) {
        addToSet(first, c);
        n++;
        return;
    }
    for (j = 0; j < count; j++) {
        if (prodn[j][0] == c) {
            if (prodn[j][3] == '$') {
                addToSet(first, '$');
                n++;
            }
            else if (islower(prodn[j][3])) {
                addToSet(first, prodn[j][3]);
                n++;
            }
            else {
                FIRST(prodn[j][3]);
            }
        }
    }
}
void FOLLOW(char c) {
    int i, j;
    if (prodn[0][0] == c) {
        addToSet(follow, '$');
        m++;
    }
    for (i = 0; i < count; i++) {
        for (j = 3; j < strlen(prodn[i]); j++) {
            if (prodn[i][j] == c) {
                if (prodn[i][j + 1] != '\0') {
                    if (islower(prodn[i][j + 1])) {
                        addToSet(follow, prodn[i][j + 1]);
                        m++;
                    } else {
                        int k;
                        n = 0;
                        memset(first, 0, sizeof(first));
                        FIRST(prodn[i][j + 1]);
                        for (k = 0; k < n; k++) {
                            if (first[k] != '$') {
                                if (addToSet(follow, first[k]))
                                    m++;
                            }
                        }
                        if (strchr(first, '$') != NULL) {
                            FOLLOW(prodn[i][0]);
                        }
                    }
                } else if (prodn[i][j + 1] == '\0' && c != prodn[i][0]) {
                    FOLLOW(prodn[i][0]);
                }
            }
        }
    }
}


/* FIRST Function*/
FIRST
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void FIRST(char);
int addToSet(char[], char);

int count, n = 0;
char prodn[10][10], first[10];

int main() {
    int i, j;
    char ch;

    printf("Enter the number of productions: ");
    scanf("%d", &count);
    printf("Enter %d productions (use $ for epsilon):\n", count);
    for (i = 0; i < count; i++) {
        scanf("%s", prodn[i]);
    }

    for (i = 0; i < count; i++) {
        char nonTerminal = prodn[i][0];
        n = 0;
        memset(first, 0, sizeof(first));
        FIRST(nonTerminal);
        printf("FIRST(%c) = { ", nonTerminal);
        for (j = 0; j < n; j++) {
            printf("%c ", first[j]);
        }
        printf("}\n");
    }

    return 0;
}

int addToSet(char set[], char c) {
    if (c == '\0') return 0;
    int i;
    for (i = 0; set[i] != '\0'; i++) {
        if (set[i] == c)
            return 0;
    }
    set[i] = c;
    set[i + 1] = '\0';
    return 1;
}

void FIRST(char c) {
    int j;

    if (!isupper(c)) {
        addToSet(first, c);
        n++;
        return;
    }

    for (j = 0; j < count; j++) {
        if (prodn[j][0] == c) {
            if (prodn[j][3] == '$') {
                addToSet(first, '$');
                n++;
            }
            else if (islower(prodn[j][3])) {
                addToSet(first, prodn[j][3]);
                n++;
            }
            else {
                FIRST(prodn[j][3]);
            }
        }
    }
}