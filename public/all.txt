//BIT STUFFING

//#include<stdio.h>
//#include<string.h>
//
//void main()
//{
//    char data[100],data1[200];
//    int c=0,i,j=0;
//    printf("enter data need to be stuffed  : ");
//    scanf("%s",data);
//    for(i=0;i<strlen(data);i++){
//        if (data[i]=='1'){
//            c+=1;
//            data1[j++]=data[i];
//        }
//        else{
//            c=0;
//            data1[j++]=data[i];
//        }
//        if(c==5){
//            c=0;
//            data1[j++]='0';
//        }
//    }
//    data1[j]='\0';
//    printf(data1);
//}


//BIT DESTUFFING

//#include<stdio.h>
//#include<string.h>
//
//void main()
//{
//    char data[100],data1[200];
//    int c=0,i,j=0;
//
//    printf("enter that need to be destuffed");
//    scanf("%s",data);
//    for(i=0;i<strlen(data);i++)
//    {
//        if(data[i]=='1'){
//            c+=1;
//            data1[j++]=data[i];
//        }
//        else{
//            if(c==5){
//                c=0;
//                continue;
//            }
//            else{
//                c=0;
//                data1[j++]=data[i];
//            }
//        }
//    }
//    data1[j]='\0';
//    printf(data1);
//}


//CHARACTER STUFFING

//#include<stdio.h>
//#include<string.h>
//
//#define MAX_SIZE 100
//#define FLAG_STRING "FLAG"
//#define ESC_STRING "ESC"
//#define FLAG_STRING_LEN 4
//#define ESC_STRING_LEN 3
//
//void charStuffing(const char input[100],char output[100])
//{
//    int i=0,j=0;
//    while(i<strlen(input))
//    {
//        if(strncmp(&input[i],FLAG_STRING,FLAG_STRING_LEN)==0||
//            strncmp(&input[i],ESC_STRING,ESC_STRING_LEN)==0)
//        {
//            strcpy(&output[j],ESC_STRING);
//            j+=ESC_STRING_LEN;
//        }
//        output[j++]=input[i++];
//    }
//    output[j]='\0';
//}
//int main()
//{
//    char data[MAX_SIZE];
//    char data1[MAX_SIZE];
//
//    printf("enter : ");
//    fgets(data,sizeof(data),stdin);
//    data[strcspn(data,"\n")]='\0';
//    charStuffing(data,data1);
//    printf(data1);
//    return 0;
//}


//CHAR DESTUFFING

//#include<stdio.h>
//#include<string.h>
//
//#define MAX_SIZE 200
//#define FLAG_STRING "FLAG"
//#define ESC_STRING "ESC"
//#define FLAG_STRING_LEN 4
//#define ESC_STRING_LEN 3
//
//void charDestuffing(const char input[],char output[])
//{
//    int i=0;
//    int j=0;
//    while(i<strlen(input))
//    {
//        if(strncmp(&input[i],ESC_STRING,ESC_STRING_LEN)==0)
//        {
//            i+=ESC_STRING_LEN;
//        }
//        output[j++]=input[i++];
//    }
//    output[j]='\0';
//}
//int main()
//{
//    char data[MAX_SIZE];
//    char data1[MAX_SIZE];
//
//    printf("enter : ");
//    fgets(data,sizeof(data),stdin);
//    data[strcspn(data,"\n")]='\0';
//    charDestuffing(data,data1);
//    printf(data1);
//    return 0;
//}


//CRC

//#include<stdio.h>
//#include<string.h>
//
//#define N strlen(gen_poly)
//
//char data[200];
//char check_value[50];
//char gen_poly[20];
//int i,j,data_length;
//
//void xor()
//{
//    for(j=0;j<N;j++)
//    {
//        check_value[j]=((check_value[j]==gen_poly[j])? '0':'1');
//    }
//}
//void crc()
//{
//    for(i=0;i<N;i++)
//    {
//        check_value[i]=data[i];
//    }
//    do{
//        if (check_value[0]=='1')
//        {
//            xor();
//        }
//        for(j=0;j<N-1;j++)
//        {
//            check_value[j]=check_value[j+1];
//        }
//        check_value[j]=data[i++];
//    }while(i<=data_length+N-1);
//}
//void receiver()
//{
//    printf("\n Enter the received data: ");
//    scanf("%s",data);
//    printf("\n received data is %s",data);
//    crc();
//    for(i=0;(i<N-1)&&(check_value[i]!='1');i++);
//    if (i<N-1)
//    {
//        printf("\n yes error");
//    }
//    else
//    {
//        printf("\n No error");
//    }
//}
//int main()
//{
//    printf("enter data : ");
//    scanf("%s",data);
//    printf("enter genpoly : ");
//    scanf("%s",gen_poly);
//    data_length=strlen(data);
//    for(i=data_length;i<data_length+N-1;i++)
//    {
//        data[i]='0';
//    }
//    data[i]='\0';
//    printf("padded data is %s",data);
//    crc();
//    printf("\nCRC or Check value is: %s", check_value);
//    for(i=data_length;i<data_length+N-1;i++)
//    {
//        data[i]=check_value[i-data_length];
//    }
//    printf("\n final data : %s",data);
//    receiver();
//    return 0;
//}

//DIJKSTRAS
//
//#include<stdio.h>
//#include<limits.h>
//#define MAX_VERTICES 100
//
//int minDistance(int dist[],int sptSet[],int vertices)
//{
//    int min=INT_MAX;
//    int minIndex;
//    for(int v=0;v<vertices;v++)
//    {
//        if (!sptSet && dist[v]<min)
//        {
//            min=dist[v];
//            minIndex=v;
//        }
//    }
//}
//void printSolution(int dist[],int vertices)
//{
//    printf("Vertex \tDistance from Source\n");
//    for(int i=0;i<vertices;i++)
//    {
//        printf("%d \t%d",i,dist[i]);
//    }
//}
//void dijkstra(int graph[MAX_VERTICES][MAX_VERTICES],int src,int vertices)
//{
//    int dist[MAX_VERTICES];
//    int sptSet[MAX_VERTICES];
//    for(int i=0;i<vertices;i++)
//    {
//        dist[i]=INT_MAX;
//        sptSet[i]=0;
//    }
//    dist[src]=0;
//    for(int c=0;c<vertices-1;c++)
//    {
//        int u=minDistance(dist,sptSet,vertices);
//        for(int v=0;v<vertices;v++)
//        {
//            if(!sptSet && graph[u][v] && dist[u]+graph[u][v]<dist[v]&& dist[u]!=INT_MAX)
//               {
//                   dist[v]=dist[u]+graph[u][v];
//               }
//        }
//    }
//    printSolution(dist,vertices);
//}
//int main()
//{
//        int vertices;
//    printf("Input the number of vertices: ");
//    scanf("%d", &vertices);
//    if (vertices <= 0 || vertices > MAX_VERTICES) {
//        printf("Invalid number of vertices. Exiting...\n");
//        return 1;
//    }
//    int graph[MAX_VERTICES][MAX_VERTICES];
//
//    printf("Input the adjacency matrix for the graph (use 0 for no edge):\n");
//    for (int i = 0; i < vertices; i++) {
//        for (int j = 0; j < vertices; j++) {
//            scanf("%d", &graph[i][j]);
//        }
//    }
//    int source;
//    printf("Input the source vertex: ");
//    scanf("%d", &source);
//    if (source < 0 || source >= vertices) {
//        printf("Invalid source vertex. Exiting...\n");
//        return 1;
//    }
//    dijkstra(graph, source, vertices);
//    return 0;
//}


//left recurssion

//#include<stdio.h>
//#include<string.h>
//int main(){
//    int i,j,k,prodCount=0,flag,consumed;
//    char productions[50][50],l[50],r[50],temp[30];
//    printf("enter no.of productions");
//    scanf("%d",&prodCount);
//    for(k=0;k<prodCount;k++)
//    {
//        i=0;
//        flag=0;
//        consumed=0;
//        printf("enter production %d",k+1);
//        scanf("%ls->%s",l,r);
//        while(sscanf(r+consumed,"%[^|]s",temp)==1&&consumed<=strlen(r))
//        {
//            if(temp[0]==l[0])
//            {
//                flag=1;
//                sscanf(productions[i++],"%s'->%s%s'\0",l,temp+1,l);
//            }
//            else
//            {
//                sscanf(productions[i++],"%s->%s%s'\0",l,temp,l);
//            }
//            consumed+=strlen(temp);
//        }
//
//        if(flag==1)
//        {
//            sprintf(productions[i++],"%s->$\0",l);
//            printf("The productions after eliminating Left Recursion for %s->%s are:\n", l, r);
//            for(j=0;j<i;j++)
//            {
//                printf("%s\n",productions[j]);
//            }
//        }
//        else
//        {
//            printf("The production %s->%s has no Left Recursion.\n", l, r);
//        }
//    }
//
//
//}

//left factoring

//#include<stdio.h>
//#include<string.h>
//
//void left_factor(char nonterminal,char gram[])
//{
//    int i,j=0,pos,n=0,k=0;
//    char parts[50][50],modified_Gram[50],new_Gram[50];
//    for(i=0;gram[i]!='\0';i++)
//    {
//        if(gram[i]=='|')
//        {
//            parts[n][j]='\0';
//            n++;
//            j=0;
//        }else{
//            parts[n][j++]=gram[i];
//        }
//    }
//    parts[n][j]='\0';
//    n++;
//    for(i=0;i<strlen(parts[i]);i++)
//    {
//        char ch=parts[0][i];
//        int iscommon=1;
//        for(j=0;j<n;j++)
//        {
//            if(parts[j][i]!=ch)
//            {
//                iscommon=0;
//                break;
//            }
//
//        }
//        if(iscommon)
//        {
//            modified_Gram[k++]=ch;
//            pos=i+1;
//        }else{
//            break;
//        }
//    }
//    modified_Gram[k]='X';
//    modified_Gram[k++]='\0';
//    new_Gram[0]='\0';
//    for(i=0;i<n;i++)
//    {
//        if(strlen(parts[i]+pos)==0)
//        {
//            strcat(new_Gram,"e");
//        }
//        else{
//            strcat(new_Gram,parts[i]+pos);
//        }
//        if(i<n-1)
//        {
//            strcat(new_Gram,"|");
//        }
//    }
//    printf("%c->%s\n",nonterminal,modified_Gram);
//    printf("X->%s\n",new_Gram);
//}
//int main()
//{
//    int numprod;
//    char nonterminal[10],gram[100][100];
//    printf("enter no.of prod: ");
//    scanf("%d",&numprod);
//    getchar();
//    for(int i=0;i<numprod;i++)
//    {
//        printf("enter prod %d: ",i+1);
//        scanf("%c->%s",&nonterminal[i],gram[i]);
//        getchar();
//    }
//    printf("output is : \n");
//    for(int i=0;i<numprod;i++)
//    {
//        left_factor(nonterminal[i],gram[i]);
//    }
//    return 0;
//}


//pattern matching

//#include<stdio.h>
//#include<string.h>
//#include<stdbool.h>
//
//bool matches_a(const char *str)
//{
//    return strcmp(str,"a")==0;
//}
//bool matches_abb(const char *str)
//{
//    return strcmp(str,"abb")==0;
//}
//bool matches_a_star_b_plus(const char *str)
//{
//    int i=0;
//    while(str[i]=='a') i++;
//    if(str[i]!='b') return false;
//    while(str[i]=='b') i++;
//    return str[i]=='\0';
//}
//int main()
//{
//    char input[100];
//    printf("enter string: ");
//    scanf("%s",input);
//    if(matches_a(input))
//    {
//        printf("match-a");
//    }
//    else if(matches_abb(input))
//    {
//        printf("matches abb");
//    }
//    else if(matches_a_star_b_plus(input))
//    {
//        printf("matches a*b+");
//    }
//    else
//    {
//        printf("No match");
//    }
//}


//SRP

//#include<stdio.h>
//#include<string.h>
//
//struct ProductionRule{
//    char left[100];
//    char right[100];
//};
//int main(){
//    int i,j,stack_length,substring_length,stack_top,rule_count=0;
//    char input[20],stack[20],temp[20],ch[2],*token1,*token2,*substring;
//    struct ProductionRule rules[20];
//    stack[0]='\0';
//    printf("enter no.on production rules");
//    scanf("%d",&rule_count);
//    printf("enter production rules");
//    for(i=0;i<rule_count;i++)
//    {
//        scanf("%s",temp);
//        token1=strtok(temp,"->");
//        token2=strtok(NULL,"->");
//        strcpy(rules[i].left,token1);
//        strcpy(rules[i].right,token2);
//    }
//    printf("enter input string: ");
//    scanf("%s",input);
//    strcat(input,"$");
//    i=0;
//    while(1){
//        if (i<strlen(input))
//        {
//            ch[0]=input[i];
//            ch[1]='\0';
//            i++;
//            strcat(stack,ch);
//            printf("%s",stack);
//            for(int k =i;k<strlen(input);k++)
//            {
//                printf("%c",input[k]);
//            }
//            printf("\t shift \n%s",ch);
//        }
//        for(j=0;j<rule_count;j++)
//        {
//            substring=strstr(stack,rules[j].right);
//            if(substring!=NULL)
//            {
//                substring_length=strlen(substring);
//                stack_length=strlen(stack);
//                stack_top=stack_length-substring_length;
//                stack[stack_top]='\0';
//                strcat(stack,rules[j].left);
//                printf("%s\t",stack);
//                for(int k=i;k<strlen(input);k++)
//                {
//                    printf("%c",input[k]);
//                }
//                printf("\t Reduce %s->%s",rules[j].left,rules[j].right);
//                j-=1;
//            }
//        }
//        if(strcmp(stack,rules[0].left)==0 && input[i]=='$')
//        {
//            printf("\n Accepted");
//            break;
//        }
//        if(strcmp(stack,rules[0].left)!=0 && i==strlen(input))
//        {
//            printf("\n Not accepted");
//            break;
//        }
//}
//return 0;
//}

//
